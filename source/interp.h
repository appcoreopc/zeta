/**
Zeta core interpreter implementation

The core interpreter expects rigid AST node object layouts generated by
the core parser. This interpreter only serves to allow the Zeta JIT compiler
to compile itself, it should never need to be run after that point, hence
I have cut some corners in terms of its implementation. The language
semantics supported are limited.
*/

#ifndef __INTERP_H__
#define __INTERP_H__

#include "vm.h"

/// Maximum number of locals supported by the core interpreter
#define MAX_LOCALS 128

/**
Interpreter stack frame
*/
typedef struct
{
    /// Number of locals
    size_t num_locals;

    value_t locals[MAX_LOCALS];

} frame_t;

value_t eval_expr(heapptr_t expr, frame_t* frame);

value_t eval_str(const char* cstr, const char* src_name);

void test_interp();

#endif

